
package main;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.io.File;
import java.io.FileReader;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.util.Random;
//
//import javax.swing.JButton;
//import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;

public class DesktopLock implements Runnable{
	private JFrame lockFrame = new JFrame("系统锁");
    private Toolkit tool = Toolkit.getDefaultToolkit();
	private Robot robot = null;
	private final int width = (int) tool.getScreenSize().getWidth();
	private final int height = (int) tool.getScreenSize().getHeight();
	private int intMark = 0;
	private String keyChar = null;
	private String[] lowerUnLockValue = null;
	private String type="";
	private String filepath="";
	private String lockpsw;
	static Thread checkThread;

	public void init(){
		lockFrame.setLayout(null);
		lockFrame.setSize(300, 150);
		lockFrame.setResizable(false);
		lockFrame.setLocationRelativeTo(null);
		lockFrame.setUndecorated(true);
		lockFrame.getRootPane().setWindowDecorationStyle(JRootPane.NONE);
		lockFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		lockFrame.setVisible(false);
		checkThread=new Thread(this);
		try {
			type="psw";
			pswLock();
			checkThread.start();
		} catch (AWTException e1) {
			e1.printStackTrace();
		}
	}
	
	public void run() {
		while(true){
			try {
				Thread.sleep(50);
				if(!lockFrame.isMaximumSizeSet() || !lockFrame.isActive()){
					lockFrame.toFront();
					lockFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	

	
	public void pswLock() throws AWTException{
		String message="";
		String remessage="";
		do{
			message = JOptionPane.showInputDialog(lockFrame, "请输入解锁码:", "设置解锁码",
					JOptionPane.INFORMATION_MESSAGE);
			if (message==null || message.equals("")) {
				System.exit(0);
			}
			remessage = JOptionPane.showInputDialog(lockFrame, "请重复输入解锁码:", "设置解锁码",
					JOptionPane.INFORMATION_MESSAGE);
			if (remessage==null) {
				System.exit(0);
			}
			if(!message.equals(remessage)){
				JOptionPane.showMessageDialog(lockFrame, "两次输入解锁码不一致,请重新输入!", "错误", JOptionPane.WARNING_MESSAGE);
			}else {
				lowerUnLockValue = new String[message.length()];
				for (int i = 0; i < message.length(); i++) {
					lowerUnLockValue[i] = String.valueOf(message
							.toLowerCase().charAt(i));
				}
			}
		}while(!message.equals(remessage));
		lock();
	}
	

	
	public void lock(){
		lockFrame.setContentPane(new DrawPanel());
		lockFrame.setVisible(true);
		lockMouse();
		try {
			robot = new Robot();
		} catch (AWTException e1) {
			e1.printStackTrace();
		}
		lockFrame.addKeyListener(new KeyListener() {

			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == 524) {
					robot.keyRelease(e.getKeyCode());
					robot.keyPress(e.getKeyCode());
					robot.keyRelease(e.getKeyCode());
					robot.keyPress(27);
					robot.keyRelease(27);
				} else if (e.getKeyCode() == 18) {
					robot.keyRelease(e.getKeyCode());
					robot.keyPress(524);
					robot.keyRelease(524);
					robot.keyPress(17);
				} else {
					robot.keyRelease(e.getKeyCode());
				}
				lockFrame.toFront();
			}

			public void keyReleased(KeyEvent e) {
				robot.keyRelease(17);
			}

			public void keyTyped(KeyEvent e) {
				if(type.equals("psw")){
					keyChar = String.valueOf(e.getKeyChar()).toLowerCase();
					if (keyChar.equals(lowerUnLockValue[intMark])) {
						intMark++;
					} else {
						intMark = 0;
					}
					if (intMark == (lowerUnLockValue.length)) {
						System.exit(0);
					}
				}
			}

		});
		lockFrame.addWindowFocusListener(new WindowFocusListener() {

			public void windowGainedFocus(WindowEvent e) {
				
			}

			public void windowLostFocus(WindowEvent e) {
				lockFrame.toFront();
			}

		});
		
		lockFrame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				lockFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
			}
		});
	}

	public void lockMouse() {
		lockFrame.addMouseMotionListener(new MouseMotionListener() {
			public void mouseMoved(MouseEvent e) {
				//unlockLabel.setForeground(Color.BLUE);
				Point mousepoint = MouseInfo.getPointerInfo().getLocation();
				int x=mousepoint.x,y=mousepoint.y;
				if(x>(width/2+100)){
					robot.mouseMove((width/2-100), y);
				}else if(x<(width/2-100)){
					robot.mouseMove((width/2+100), y);
				}else if(y>(height*(2f/8f))){
					robot.mouseMove(x, (int)(height*(1f/8f)));
				}else if(y<(height*(1f/8f))){
					robot.mouseMove(x, (int)(height*(2f/8f)));
				}
			}
			public void mouseDragged(MouseEvent e) {
			}
		});
	}

	class DrawPanel extends JPanel {
		public void paint(Graphics g) {
			super.paint(g);
			setLayout(null);
				this.setBackground(Color.WHITE);
				g.setColor(Color.RED);
			g.setFont(new Font("幼圆", Font.BOLD, 200));
			g.drawString("违规操作", width/2-350, height/2+70);
			g.setFont(new Font("幼圆", Font.PLAIN, 18));

		}
	}

	public static void main(String[] args) throws AWTException {
		new DesktopLock().init();
	}
}
